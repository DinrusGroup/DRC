#summary Kandil is the magic oil-lamp that manifests your documentation wishes.

= Kandil =
Kandil is an XHTML and !JavaScript browser application for documentation
generated by dil.

Ddoc is used as the underlying system to generate the documentation.
Dil improves upon Ddoc with unique features and introduces small differences:

== Features ==
  * Display the source code of a symbol when clicked.
  * Every symbol in the document is targetable using a URL fragment.<br>E.g.: `url/dil.doc.Macro.html#Macro.this`
  * Superfluous indentation is removed from embedded code in comments.
  * Every symbol can be linked to its source location (a repository or a local HTML file.)
  * Protection, linkage and storage class attributes are shown in brackets.
  * Report предупреждениеs for undefined macros and unterminated macros (missing closing ')'.)
  * Every token in a code section is highlighted (customizable via kandil/style.css and data/html_map.d.)
  * Undocumented symbols can be included in the documentation using the '-i'-switch.
  * Unicode alphas are supported in macro, section and parameter names.

== Macros ==
  * DIL_SYMBOL (replaces DDOC_PSYMBOL)<br>Five Parameters:
      # Symbol name (e.g. "this")
      # Fully qualified name excluding the module's FQN (e.g. "Macro.this", MODFQN = "dil.doc.Macro")
      # Symbol kind (e.g. "ctor")<br>Values: `template, class, interface, struct, union, alias, typedef, enum, enummem, function, variable, invariant, new, delete, unittest, ctor, dtor, sctor, sdtor`
      # Begin line number in the code (e.g. 19)
      # End line number in the code (e.g. 23)
  * DIL_MODFQN      (e.g. "dil.doc.Macro")
  * DIL_MODPATH     (e.g. "dil/doc/Macro.d")
  * DIL_DOCFILENAME (e.g. "dil.doc.Macro.html")
  * DIL_ATTRIBUTES
  * DIL_PROT
  * DIL_STC
  * DIL_LINKAGE
  * DIL_PARAMS
  * DIL_TEMPLATE_PARAMS
  * DIL_BASE_CLASSES
  * DDOC_AUTHOR (singular of existing DDOC_AUTHORS)

== Shortcomings ==
In contrast to dmd, dil doesn't highlight some keywords (e.g. null) and it
doesn't emphasize symbols found in the comment text. In my experience, this
is more trouble than desirable, explicit marking would have been better.
Nevertheless, this might be implemented using !JavaScript.

Variables/parameters with a !DeclaratorSuffix (e.g. "`int a[]`") are slightly
problematic (use "`int[] a`" instead.)

Sometimes it is apparent that semantic information is lacking.
