/*===-- llvm-c/TargetMachine.h - Target Machine Library к Interface - C++ -*-=*\
|*                                                                            *|
|* Part of the LLVM Project, under the Apache License v2.0 with LLVM          *|
|* Exceptions.                                                                *|
|* See https://llvm.org/LICENSE.txt for license information.                  *|
|* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception                    *|
|*                                                                            *|
|*===----------------------------------------------------------------------===*|
|*                                                                            *|
|* This header declares the к interface to the Target and TargetMachine       *|
|* classes, which can be used to generate assembly or object files.           *|
\*===----------------------------------------------------------------------===*/

module ll.TargetMachine;
import ll.Target, ll.Types;


extern (C){

struct LLVMOpaqueTargetMachine;
struct LLVMTarget;
alias LLVMOpaqueTargetMachine *ЛЛЦелеваяМашина;
alias LLVMTarget *ЛЛЦель;

enum LLVMCodeGenOptLevel{
    None,
    Less,
    Default,
    Aggressive
} ;

enum LLVMRelocMode{
    Default,
    Static,
    PIC,
    DynamicNoPic,
    ROPI,
    RWPI,
    ROPI_RWPI
} ;

enum LLVMCodeModel{
    Default,
    JITDefault,
    Tiny,
    Small,
    Kernel,
    Medium,
    Large
} ;

enum LLVMCodeGenFileType {
    LLVMAssemblyFile,
    LLVMObjectFile
} ;

/** Returns the first llvm::Target in the registered targets list. */
ЛЛЦель ЛЛДайПервЦель();
/** Returns the next llvm::Target given a previous one (or null if there's none) */
ЛЛЦель ЛЛДайСледщЦель(ЛЛЦель T);

/*===-- Target ------------------------------------------------------------===*/
/** Finds the target corresponding to the given name and stores it in \p T.
  Returns 0 on success. */
ЛЛЦель ЛЛДайЦельИзИмени(ткст0 Name);

/** Finds the target corresponding to the given triple and stores it in \p T.
  Returns 0 on success. Optionally returns any error in ошСооб.
  Use LLVMDisposeMessage to dispose the message. */
ЛЛБул ЛЛДайЦельИзТриады(ткст0 Triple, ЛЛЦель *T,
                                 ткст0 *ошСооб);

/** Returns the name of a target. See llvm::Target::getName */
ткст0 ЛЛДайИмяЦели(ЛЛЦель T);

/** Returns the description  of a target. See llvm::Target::getDescription */
ткст0 ЛЛДайОписаниеЦели(ЛЛЦель T);

/** Returns if the target has a JIT */
ЛЛБул ЛЛЦель_ЕстьДжИТ_ли(ЛЛЦель T);

/** Returns if the target has a TargetMachine associated */
ЛЛБул ЛЛЦель_ЕстьЦелМаш_ли(ЛЛЦель T);

/** Returns if the target as an ASM backend (required for emitting output) */
ЛЛБул ЛЛЦель_ЕстьАсмБэкэнд_ли(ЛЛЦель T);

/*===-- Target Machine ----------------------------------------------------===*/
/** Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine */
ЛЛЦелеваяМашина ЛЛСоздайЦелМаш(ЛЛЦель T,
  ткст0 Triple, ткст0 CPU, ткст0 Features,
  LLVMCodeGenOptLevel Level, LLVMRelocMode Reloc, LLVMCodeModel CodeModel);

/** Dispose the ЛЛЦелеваяМашина instance generated by
  LLVMCreateTargetMachine. */
проц ЛЛВыместиЦелМаш(ЛЛЦелеваяМашина T);

/** Returns the Target used in a TargetMachine */
ЛЛЦель ЛЛДайЦельЦелМаш(ЛЛЦелеваяМашина T);

/** Returns the triple used creating this target machine. See
  llvm::TargetMachine::getTriple. The result needs to be disposed with
  LLVMDisposeMessage. */
ткст0 ЛЛДайТриадуЦелМаш(ЛЛЦелеваяМашина T);

/** Returns the cpu used creating this target machine. See
  llvm::TargetMachine::getCPU. The result needs to be disposed with
  LLVMDisposeMessage. */
ткст0 ЛЛДайЦПБЦелМаш(ЛЛЦелеваяМашина T);

/** Returns the feature string used creating this target machine. See
  llvm::TargetMachine::getFeatureString. The result needs to be disposed with
  LLVMDisposeMessage. */
ткст0 ЛЛДайТкстФичЦелМаш(ЛЛЦелеваяМашина T);

/** Create a DataLayout based on the targetMachine. */
ЛЛДанныеОЦели ЛЛСоздайРаскладкуДанЦели(ЛЛЦелеваяМашина T);

/** Set the target machine's ASM verbosity. */
проц ЛЛУстЦелМашАсмВербозность(ЛЛЦелеваяМашина T,
                                      ЛЛБул VerboseAsm);

/** Emits an asm or object file for the given module to the filename. This
  wraps several конст++ only classes (among them a file stream). Returns any
  error in ошСооб. Use LLVMDisposeMessage to dispose the message. */
ЛЛБул ЛЛЦелМашГенерируйВФайл(ЛЛЦелеваяМашина T, ЛЛМодуль M,
  ткст0 имяФ, LLVMCodeGenFileType codegen, ткст0 *ошСооб);

/** Compile the LLVM IR stored in \p M and store the result in \p выхБуфПам. */
ЛЛБул ЛЛЦелМашГенерируйВБуфПам(ЛЛЦелеваяМашина T, ЛЛМодуль M,
  LLVMCodeGenFileType codegen, ткст0* ошСооб, ЛЛБуферПамяти *выхБуфПам);

/*===-- Triple ------------------------------------------------------------===*/
/** Get a triple for the host machine as a string. The result needs to be
  disposed with LLVMDisposeMessage. */
ткст0 ЛЛДайДефТриадуЦели();

/** Normalize a target triple. The result needs to be disposed with
  LLVMDisposeMessage. */
ткст0 ЛЛНормализуйТриадуЦели(ткст0 triple);

/** Get the host CPU as a string. The result needs to be disposed with
  LLVMDisposeMessage. */
ткст0 ЛЛДайИмяЦПБХоста();

/** Get the host CPU's features as a string. The result needs to be disposed
  with LLVMDisposeMessage. */
ткст0 ЛЛДайФичиЦПБХоста();

/** Adds the target-specific analysis passes to the pass manager. */
проц ЛЛДобавьПроходкуАнализа(ЛЛЦелеваяМашина T, ЛЛМенеджерПроходок пм);


}

