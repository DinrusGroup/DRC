module drc.ast.Node;

import common;

public import drc.lexer.Token;
public import drc.ast.NodesEnum;

/// Корневой класс всех элементов синтаксического древа Динрус.
abstract class Узел
{
  КатегорияУзла категория; /// Категория данного узла.
  ВидУзла вид; /// Вид данного узла.
  Узел[] отпрыски; // Когда-нибудь, кажется, будет удалён.
  Сема* начало, конец; /// Семы в начале и конце данного узла.

  /// Строит объект Узел.
  this(КатегорияУзла категория)
  {
    assert(категория != КатегорияУзла.Неопределённый);
    this.категория = категория;
  }

  проц  установиСемы(Сема* начало, Сема* конец)
  {
    this.начало = начало;
    this.конец = конец;
  }

  Класс устСемы(Класс)(Класс узел)
  {
    узел.установиСемы(this.начало, this.конец);
    return узел;
  }

  проц  добавьОтпрыск(Узел отпрыск)
  {
    assert(отпрыск !is пусто, "ошибка в " ~ this.classinfo.имя);
    this.отпрыски ~= отпрыск;
  }

  проц  добавьОпцОтпрыск(Узел отпрыск)
  {
    отпрыск is пусто || добавьОтпрыск(отпрыск);
  }

  проц  добавьОтпрыски(Узел[] отпрыски)
  {
    assert(отпрыски !is пусто && delegate{
      foreach (отпрыск; отпрыски)
        if (отпрыск is пусто)
          return нет;
      return да; }(),
      "ошибка в " ~ this.classinfo.имя
    );
    this.отпрыски ~= отпрыски;
  }

  проц  добавьОпцОтпрыски(Узел[] отпрыски)
  {
    отпрыски is пусто || добавьОтпрыски(отпрыски);
  }

  /// Возврашает референцию на Класс, если узел можно преобразовать в него.
  Класс Является(Класс)()
  {
    if (вид == mixin("ВидУзла." ~ Класс.stringof))
      return cast(Класс)cast(ук)this;
    return пусто;
  }

  /// Преобразует данный узел в Класс.
  Класс в(Класс)()
  {
    return cast(Класс)cast(ук)this;
  }

  /// Возвращает глубокую (deep) копию этого узла.
  abstract Узел копируй();

  /// Возвращает поверхностную (shallow)  копию этого объекта.
  final Узел dup()
  {
    // Найти размер этого объекта.
    alias typeof(this.classinfo.иниц[0]) т_байт;
    т_мера размер = this.classinfo.иниц.length;
    // Скопировать данные этого объекта.
    т_байт[] данные = (cast(т_байт*)this)[0..размер].dup;
    return cast(Узел)данные.ptr;
  }

  /// Этот ткст миксирован в конструктор класса, наследующего
  /// от Узел. Устанавливает вид члена.
  const ткст установить_вид = `this.вид = mixin("ВидУзла." ~ typeof(this).stringof);`;
}
