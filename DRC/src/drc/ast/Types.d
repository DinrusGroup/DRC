/// Author: Aziz Köksal
/// License: GPL3
/// $(Maturity average)
module drc.ast.Types;

public import drc.ast.Type;
import drc.ast.Node,
       drc.ast.Expression,
       drc.ast.Parameters,
       drc.ast.NodeCopier;
import drc.lexer.Identifier;
import drc.semantic.Types;
import drc.Enums;

/// Синтаксис ошибка.
class НелегальныйТип : УзелТипа
{
  this()
  {
    mixin(установить_вид);
  }
  mixin(методКопирования);
}

/// сим, цел, плав etc.
class ИнтегральныйТип : УзелТипа
{
  TOK лекс;
  this(TOK лекс)
  {
    mixin(установить_вид);
    this.лекс = лекс;
  }
  mixin(методКопирования);
}

/// Идентификатор
class ТИдентификатор : УзелТипа
{
  Идентификатор* идент;
  this(Идентификатор* идент)
  {
    mixin(установить_вид);
    this.идент = идент;
  }
  mixin(методКопирования);
}

/// Тип "." Тип
class КвалифицированныйТип : УзелТипа
{
  alias следщ лв; /// Left-hand сторона тип.
  УзелТипа пв; /// Right-hand сторона тип.
  this(УзелТипа лв, УзелТипа пв)
  {
    super(лв);
    mixin(установить_вид);
    добавьОтпрыск(пв);
    this.пв = пв;
  }
  mixin(методКопирования);
}

/// "." Тип
class ТМасштабМодуля : УзелТипа
{
  this()
  {
    mixin(установить_вид);
  }
  mixin(методКопирования);
}

/// "typeof" "(" Выражение ")" or$(BR)
/// "typeof" "(" "return" ")" (D2.0)
class ТТип : УзелТипа
{
  Выражение в;
  /// "typeof" "(" Выражение ")"
  this(Выражение в)
  {
    this();
    добавьОтпрыск(в);
    this.в = в;
  }

  /// При D2.0: "typeof" "(" "return" ")"
  this()
  {
    mixin(установить_вид);
  }

  /// Возвращает да, если из_ a "typeof(return)".
  бул типВозврата_ли()
  {
    return в is null;
  }

  mixin(методКопирования);
}

/// Идентификатор "!" "(" ПараметрыШаблона? ")"
class ТЭкземплярШаблона : УзелТипа
{
  Идентификатор* идент;
  АргументыШаблона шарги;
  this(Идентификатор* идент, АргументыШаблона шарги)
  {
    mixin(установить_вид);
    добавьОпцОтпрыск(шарги);
    this.идент = идент;
    this.шарги = шарги;
  }
  mixin(методКопирования);
}

/// Тип *
class ТУказатель : УзелТипа
{
  this(УзелТипа следщ)
  {
    super(следщ);
    mixin(установить_вид);
  }
  mixin(методКопирования);
}

/// Dynamic массив: T[] or$(BR)
/// Статический массив: T[E] or$(BR)
/// Срез массив (for tuples): T[E..E] or$(BR)
/// Associative массив: T[T]
class ТМассив : УзелТипа
{
  Выражение e1, e2;
  УзелТипа ассоцТип;

  this(УзелТипа t)
  {
    super(t);
    mixin(установить_вид);
  }

  this(УзелТипа t, Выражение e1, Выражение e2)
  {
    this(t);
    добавьОтпрыск(e1);
    добавьОпцОтпрыск(e2);
    this.e1 = e1;
    this.e2 = e2;
  }

  this(УзелТипа t, УзелТипа ассоцТип)
  {
    this(t);
    добавьОтпрыск(ассоцТип);
    this.ассоцТип = ассоцТип;
  }

  бул динамический_ли()
  {
    return !ассоцТип && !e1;
  }

  бул статический_ли()
  {
    return e1 && !e2;
  }

  бул срез_ли()
  {
    return e1 && e2;
  }

  бул ассоциативный_ли()
  {
    return ассоцТип !is null;
  }

  mixin(методКопирования);
}

/// ТипИтога "function" "(" Параметры? ")"
class ТФункция : УзелТипа
{
  alias следщ типВозврата;
  Параметры парамы;
  this(УзелТипа типВозврата, Параметры парамы)
  {
    super(типВозврата);
    mixin(установить_вид);
    добавьОтпрыск(парамы);
    this.парамы = парамы;
  }
  mixin(методКопирования);
}

/// ТипИтога "delegate" "(" Параметры? ")"
class ТДелегат : УзелТипа
{
  alias следщ типВозврата;
  Параметры парамы;
  this(УзелТипа типВозврата, Параметры парамы)
  {
    super(типВозврата);
    mixin(установить_вид);
    добавьОтпрыск(парамы);
    this.парамы = парамы;
  }
  mixin(методКопирования);
}

/// Тип "(" BasicType2 Идентификатор ")" "(" Параметры? ")"
class ТУказательНаФункСи : УзелТипа
{
  Параметры парамы;
  this(УзелТипа тип, Параметры парамы)
  {
    super(тип);
    mixin(установить_вид);
    добавьОпцОтпрыск(парамы);
  }
  mixin(методКопирования);
}

/// "class" Идентификатор : BaseClasses
class ТипКлассОснова : УзелТипа
{
  Защита защ;
  this(Защита защ, УзелТипа тип)
  {
    super(тип);
    mixin(установить_вид);
    this.защ = защ;
  }
  mixin(методКопирования);
}

// version(D2)
// {
/// "const" "(" Тип ")"
class ТКонст : УзелТипа
{
  this(УзелТипа следщ)
  {
    // Если t is null: cast(const)
    super(следщ);
    mixin(установить_вид);
  }
  mixin(методКопирования);
}

/// "invariant" "(" Тип ")"
class ТИнвариант : УзелТипа
{
  this(УзелТипа следщ)
  {
    // Если t is null: cast(invariant)
    super(следщ);
    mixin(установить_вид);
  }
  mixin(методКопирования);
}
// } // version(D2)
