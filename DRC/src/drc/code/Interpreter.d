/// Author: Aziz Köksal
/// License: GPL3
/// $(Maturity very low)
module drc.code.Interpreter;

import  drc.ast.Visitor,
       drc.ast.Node,
       drc.ast.Declarations,
       drc.ast.Expressions,
       drc.ast.Statements,
       drc.ast.Types,
       drc.ast.Parameters;
import drc.semantic.Symbol,
       drc.semantic.Symbols,
       drc.semantic.Types;
import drc.Diagnostics;

/// Используется для оценки кода Ди при компиляции.
class Интерпретатор : Визитёр
{
  Диагностика диаг;

  static class Итог : Выражение
  {
    override Итог копируй(){return null;}
  }

  /// Не Итог. Идентичен NAN в арифметике плавающей точки.
  static const Итог НЕИ;

  static this()
  {
    НЕИ = new Итог;
    НЕИ.тип = Типы.Ошибка;
  }

  /// Оценивает выражение "в".
  /// Возвращает: НЕИ или значение.
  static Выражение интерпретируй(Выражение в, Диагностика диаг)
  {
    return (new Интерпретатор(диаг)).оцени(в);
  }

  /// Executes the function at compile-время with the given arguments.
  /// Возвращает: НЕИ or a значение.
  static Выражение интерпретируй(ДекларацияФункции дф, Выражение[] арги,
                              Диагностика диаг)
  {
    return (new Интерпретатор(диаг)).оцени(дф, арги);
  }

  /// Constructs an Интерпретатор объект.
  this(Диагностика диаг)
  {
    this.диаг = диаг;
  }

  /// Start оцениuation.
  Выражение оцени(Выражение в)
  {
    return в;
  }
  // TODO: are оцени() methods needed for другой Nodes?

  /// Начинает оценку  функции.
  Выражение оцени(ДекларацияФункции дф, Выражение[] арги)
  {
    // We cache this результат so that we don't blindly try в reevaluate
    // functions that can't be evaluated at compile время
    if(дф.нельзяИнтерпретировать)
      return НЕИ;

    // TODO: check for nested/method

    // Check for invalid parameter types
    if(дф.парамы.естьВариадические() || дф.парамы.естьЛэйзи())
    {
      дф.нельзяИнтерпретировать = да;
      return НЕИ;
    }

    // remove me plx
    assert(нет);
    return НЕИ;
  }

  /// Some handy aliases.
  private alias Декларация D, Д;
  private alias Выражение E, В; /// определено
  private alias Инструкция S, И; /// определено
  private alias УзелТипа T, Т; /// определено
  private alias Параметр P, П; /// определено
  private alias Узел N, У; /// определено

  /// Returns да if в is immutable.
  static бул неизменное_ли(Выражение в)
  {
    switch (в.вид)
    {
    alias ВидУзла ВУ;
    case ВУ.ЦелВыражение, ВУ.ВыражениеРеал,
         ВУ.ВыражениеКомплекс, ВУ.ВыражениеСим,
         ВУ.БулевоВыражение, ВУ.ТекстовоеВыражение,
         ВУ.ВыражениеНуль:
      return да;
    default:
    }
    return нет;
  }

  static бул бул_ли(Выражение в, бул значение)
  {
    switch(в.вид)
    {
      alias ВидУзла ВУ;
    case ВУ.ЦелВыражение:
      auto чис = в.в!(ЦелВыражение).число;
      return чис ? значение == да : значение == нет;
    case ВУ.ВыражениеРеал:
      auto чис = в.в!(ВыражениеРеал).число;
      return чис ? значение == да : значение == нет;
    case ВУ.ВыражениеКомплекс:
      auto чис = в.в!(ВыражениеКомплекс).число;
      return чис ? значение == да : значение == нет;
    case ВУ.ВыражениеСим:
      auto чис = в.в!(ВыражениеСим).значение.число;
      return чис ? значение == да : значение == нет;
    case ВУ.БулевоВыражение:
      auto чис = в.в!(БулевоВыражение).значение.число;
      return чис ? значение == да : значение == нет;
    case ВУ.ТекстовоеВыражение:
      return значение == да;
    case ВУ.ВыражениеНуль:
      return значение == нет;
    default:
    }
    return нет;
  }

  /+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  |                                Declarations                               |
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+/

override
{
  D посети(СложнаяДекларация d)
  {
    return d;
  }

  D посети(НелегальнаяДекларация)
  { assert(0, "интерпретируется сломанное АДС"); return null; }

  // D посети(ПустаяДекларация ed)
  // { return ed; }

  // D посети(ДекларацияМодуля)
  // { return null; }

  D посети(ДекларацияИмпорта d)
  {
    return d;
  }

  D посети(ДекларацияАлиаса ad)
  {
    return ad;
  }

  D посети(ДекларацияТипдефа td)
  {
    return td;
  }

  D посети(ДекларацияПеречня d)
  {
    return d;
  }

  D посети(ДекларацияЧленаПеречня d)
  {
    return d;
  }

  D посети(ДекларацияКласса d)
  {
    return d;
  }

  D посети(ДекларацияИнтерфейса d)
  {
    return d;
  }

  D посети(ДекларацияСтруктуры d)
  {
    return d;
  }

  D посети(ДекларацияСоюза d)
  {
    return d;
  }

  D посети(ДекларацияКонструктора d)
  {
    return d;
  }

  D посети(ДекларацияСтатическогоКонструктора d)
  {
    return d;
  }

  D посети(ДекларацияДеструктора d)
  {
    return d;
  }

  D посети(ДекларацияСтатическогоДеструктора d)
  {
    return d;
  }

  D посети(ДекларацияФункции d)
  {
    return d;
  }

  D посети(ДекларацияПеременных vd)
  {
    return vd;
  }

  D посети(ДекларацияИнварианта d)
  {
    return d;
  }

  D посети(ДекларацияЮниттеста d)
  {
    return d;
  }

  D посети(ДекларацияОтладки d)
  {
    return d;
  }

  D посети(ДекларацияВерсии d)
  {
    return d;
  }

  D посети(ДекларацияШаблона d)
  {
    return d;
  }

  D посети(ДекларацияНов d)
  {
    return d;
  }

  D посети(ДекларацияУдали d)
  {
    return d;
  }

  // Attributes:

  D посети(ДекларацияЗащиты d)
  {
    return d;
  }

  D посети(ДекларацияКлассаХранения d)
  {
    return d;
  }

  D посети(ДекларацияКомпоновки d)
  {
    return d;
  }

  D посети(ДекларацияРазложи d)
  {
    return d;
  }

  D посети(ДекларацияСтатическогоПодтверди d)
  {
    return d;
  }

  D посети(ДекларацияСтатическогоЕсли d)
  {
    return d;
  }

  D посети(ДекларацияСмеси d)
  {
    return d;
  }

  D посети(ДекларацияПрагмы d)
  {
    return d;
  }
} // override

  /+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  |                                 Statements                                |
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+/

override
{
  S посети(СложнаяИнструкция s)
  {
    return s;
  }

  S посети(НелегальнаяИнструкция)
  { assert(0, "интерпретируется сломанное АДС"); return null; }

  S посети(ПустаяИнструкция s)
  {
    return s;
  }

  S посети(ИнструкцияТелаФункции s)
  {
    return s;
  }

  S посети(ИнструкцияМасштаб s)
  {
    return s;
  }

  S посети(ИнструкцияСМеткой s)
  {
    return s;
  }

  S посети(ИнструкцияВыражение s)
  {
    return s;
  }

  S посети(ИнструкцияДекларация s)
  {
    return s;
  }

  S посети(ИнструкцияЕсли s)
  {
    return s;
  }

  S посети(ИнструкцияПока s)
  {
    return s;
  }

  S посети(ИнструкцияДелайПока s)
  {
    return s;
  }

  S посети(ИнструкцияПри s)
  {
    return s;
  }

  S посети(ИнструкцияСКаждым s)
  {
    return s;
  }

  // D2.0
  S посети(ИнструкцияДиапазонСКаждым s)
  {
    return s;
  }

  S посети(ИнструкцияЩит s)
  {
    return s;
  }

  S посети(ИнструкцияРеле s)
  {
    return s;
  }

  S посети(ИнструкцияДефолт s)
  {
    return s;
  }

  S посети(ИнструкцияДалее s)
  {
    return s;
  }

  S посети(ИнструкцияВсё s)
  {
    return s;
  }

  S посети(ИнструкцияИтог s)
  {
    return s;
  }

  S посети(ИнструкцияПереход s)
  {
    return s;
  }

  S посети(ИнструкцияДля s)
  {
    return s;
  }

  S посети(ИнструкцияСинхр s)
  {
    return s;
  }

  S посети(ИнструкцияПробуй s)
  {
    return s;
  }

  S посети(ИнструкцияЛови s)
  {
    return s;
  }

  S посети(ИнструкцияИтожь s)
  {
    return s;
  }

  S посети(ИнструкцияСтражМасштаба s)
  {
    return s;
  }

  S посети(ИнструкцияБрось s)
  {
    return s;
  }

  S посети(ИнструкцияЛетучее s)
  {
    return s;
  }

  S посети(ИнструкцияБлокАсм s)
  {
    return s;
  }

  S посети(ИнструкцияАсм s)
  {
    return s;
  }

  S посети(ИнструкцияАсмРасклад s)
  {
    return s;
  }

  S посети(ИнструкцияНелегальныйАсм)
  { assert(0, "интерпретируется сломанное АДС"); return null; }

  S посети(ИнструкцияПрагма s)
  {
    return s;
  }

  S посети(ИнструкцияСмесь s)
  {
    return s;
  }

  S посети(ИнструкцияСтатическоеЕсли s)
  {
    return s;
  }

  S посети(ИнструкцияСтатическоеПодтверди s)
  {
    return s;
  }

  S посети(ИнструкцияОтладка s)
  {
    return s;
  }

  S посети(ИнструкцияВерсия s)
  {
    return s;
  }
} // override

  /+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  |                                Expressions                                |
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+/

override
{
  E посети(НелегальноеВыражение)
  { assert(0, "интерпретируется сломанное АДС"); return null; }

  E посети(ВыражениеУсловия в)
  {
    auto r = посетиВ(в.условие);

    if(r !is НЕИ)
    {
      if(бул_ли(r, да))
        r = посетиВ(в.лв);
      else if(бул_ли(r, нет))
        r = посетиВ(в.пв);
      else
        r = НЕИ;
    }
    return r;
  }

  E посети(ВыражениеЗапятая в)
  {
    auto r = посетиВ(в.лв);
    if(r !is НЕИ)
      r = посетиВ(в.пв);
    return r;
  }

  E посети(ВыражениеИлиИли в)
  {
    auto r = посетиВ(в.лв);

    if(r !is НЕИ)
    {
      if(бул_ли(r, да))
        r = new ЦелВыражение(1, Типы.Бул);
      else if(бул_ли(r, нет))
      {
        r = посетиВ(в.пв);

        if(r !is НЕИ)
        {
          if(бул_ли(r, да))
            r = new ЦелВыражение(1, Типы.Бул);
          else if(бул_ли(r, нет))
            r = new ЦелВыражение(0, Типы.Бул);
          else
            r = НЕИ;
        }
      }
      else
        r = НЕИ;
    }
    return r;
  }

  E посети(ВыражениеИИ в)
  {
    auto r = посетиВ(в.лв);

    if(r !is НЕИ)
    {
      if(бул_ли(r, нет))
        r = new ЦелВыражение(0, Типы.Бул);
      else if(бул_ли(r, да))
      {
        r = посетиВ(в.пв);
        if(r !is НЕИ)
        {
          if(бул_ли(r, да))
            r = new ЦелВыражение(1, Типы.Бул);
          else if(бул_ли(r, нет))
            r = new ЦелВыражение(0, Типы.Бул);
          else
            r = НЕИ;
        }
      }
      else
        r = НЕИ;
    }
    return r;
  }

  E посети(ВыражениеИли в)
  {
    return в;
  }

  E посети(ВыражениеИИли в)
  {
    return в;
  }

  E посети(ВыражениеИ в)
  {
    return в;
  }

  E посети(ВыражениеРавно в)
  {
    return в;
  }

  E посети(ВыражениеРавенство в)
  {
    return в;
  }

  E посети(ВыражениеОтнош в)
  {
    return в;
  }

  E посети(ВыражениеВхо в)
  {
    return в;
  }

  E посети(ВыражениеЛСдвиг в)
  {
    return в;
  }

  E посети(ВыражениеПСдвиг в)
  {
    return в;
  }

  E посети(ВыражениеБПСдвиг в)
  {
    return в;
  }

  E посети(ВыражениеПлюс в)
  {
    return в;
  }

  E посети(ВыражениеМинус в)
  {
    return в;
  }

  E посети(ВыражениеСоедини в)
  {
    return в;
  }

  E посети(ВыражениеУмножь в)
  {
    return в;
  }

  E посети(ВыражениеДели в)
  {
    return в;
  }

  E посети(ВыражениеМод в)
  {
    return в;
  }

  E посети(ВыражениеПрисвой в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойЛСдвиг в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойПСдвиг в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойБПСдвиг в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойИли в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойИ в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойПлюс в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойМинус в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойДел в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойУмн в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойМод в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойИИли в)
  {
    return в;
  }

  E посети(ВыражениеПрисвойСоед в)
  {
    return в;
  }

  E посети(ВыражениеАдрес в)
  {
    return в;
  }

  E посети(ВыражениеПреИнкр в)
  {
    return в;
  }

  E посети(ВыражениеПреДекр в)
  {
    return в;
  }

  E посети(ВыражениеПостИнкр в)
  {
    return в;
  }

  E посети(ВыражениеПостДекр в)
  {
    return в;
  }

  E посети(ВыражениеДереф в)
  {
    return в;
  }

  E посети(ВыражениеЗнак в)
  {
    return в;
  }

  E посети(ВыражениеНе в)
  {
    return в;
  }

  E посети(ВыражениеКомп в)
  {
    return в;
  }

  E посети(ВыражениеВызов в)
  {
    return в;
  }

  E посети(ВыражениеНов в)
  {
    return в;
  }

  E посети(ВыражениеНовАнонКласс в)
  {
    return в;
  }

  E посети(ВыражениеУдали в)
  {
    return в;
  }

  E посети(ВыражениеКаст в)
  {
    return в;
  }

  E посети(ВыражениеИндекс в)
  {
    return в;
  }

  E посети(ВыражениеСрез в)
  {
    return в;
  }

  E посети(ВыражениеТочка в)
  {
    return в;
  }

  E посети(ВыражениеМасштабМодуля в)
  {
    return в;
  }

  E посети(ВыражениеИдентификатор в)
  {
    return в;
  }

  E посети(ВыражениеЭкземплярШаблона в)
  {
    return в;
  }

  E посети(ВыражениеСпецСема в)
  {
    return в;
  }

  E посети(ВыражениеЭтот в)
  {
    return в;
  }

  E посети(ВыражениеСупер в)
  {
    return в;
  }

  E посети(ВыражениеНуль в)
  {
    return в;
  }

  E посети(ВыражениеДоллар в)
  {
    return в;
  }

  E посети(БулевоВыражение в)
  {
    return в.значение;
  }

  E посети(ЦелВыражение в)
  {
    return в;
  }

  E посети(ВыражениеРеал в)
  {
    return в;
  }

  E посети(ВыражениеКомплекс в)
  {
    return в;
  }

  E посети(ВыражениеСим в)
  {
    return в;
  }

  E посети(ТекстовоеВыражение в)
  {
    return в;
  }

  E посети(ВыражениеЛитералМассива в)
  {
    return в;
  }

  E посети(ВыражениеЛитералАМассива в)
  {
    return в;
  }

  E посети(ВыражениеПодтверди в)
  {
    return в;
  }

  E посети(ВыражениеСмесь в)
  {
    return в;
  }

  E посети(ВыражениеИмпорта в)
  {
    return в;
  }

  E посети(ВыражениеТипа в)
  {
    return в;
  }

  E посети(ВыражениеИдТипаТочка в)
  {
    return в;
  }

  E посети(ВыражениеИдТипа в)
  {
    return в;
  }

  E посети(ВыражениеЯвляется в)
  {
    return в;
  }

  E посети(ВыражениеРодит в)
  {
    return в;
  }

  E посети(ВыражениеЛитералФункции в)
  {
    return в;
  }

  E посети(ВыражениеТрактовки в) // D2.0
  {
    return в;
  }

  E посети(ВыражениеИницПроц в)
  {
    return в;
  }

  E посети(ВыражениеИницМассива в)
  {
    return в;
  }

  E посети(ВыражениеИницСтруктуры в)
  {
    return в;
  }

  E посети(ВыражениеТипАсм в)
  {
    return в;
  }

  E посети(ВыражениеСмещениеАсм в)
  {
    return в;
  }

  E посети(ВыражениеСегАсм в)
  {
    return в;
  }

  E посети(ВыражениеАсмПослеСкобки в)
  {
    return в;
  }

  E посети(ВыражениеАсмСкобка в)
  {
    return в;
  }

  E посети(ВыражениеЛокальногоРазмераАсм в)
  {
    return в;
  }

  E посети(ВыражениеАсмРегистр в)
  {
    return в;
  }
} // override

  /+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  |                                   Типы                                   |
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+/

override
{
  T посети(НелегальныйТип)
  { assert(0, "интерпретируется сломанное АДС"); return null; }

  T посети(ИнтегральныйТип t)
  {
    return t;
  }

  T посети(КвалифицированныйТип t)
  {
    return t;
  }

  T посети(ТМасштабМодуля t)
  {
    return t;
  }

  T посети(ТИдентификатор t)
  {
    return t;
  }

  T посети(ТТип t)
  {
    return t;
  }

  T посети(ТЭкземплярШаблона t)
  {
    return t;
  }

  T посети(ТУказатель t)
  {
    return t;
  }

  T посети(ТМассив t)
  {
    return t;
  }

  T посети(ТФункция t)
  {
    return t;
  }

  T посети(ТДелегат t)
  {
    return t;
  }

  T посети(ТУказательНаФункСи t)
  {
    return t;
  }

  T посети(ТипКлассОснова t)
  {
    return t;
  }

  T посети(ТКонст t) // D2.0
  {
    return t;
  }

  T посети(ТИнвариант t) // D2.0
  {
    return t;
  }
} // override

  /+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  |                                 Параметры                                |
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+/

override
{
  N посети(Параметр p)
  {
    return p;
  }

  N посети(Параметры p)
  {
    return p;
  }

  N посети(ПараметрАлиасШаблона p)
  {
    return p;
  }

  N посети(ПараметрТипаШаблона p)
  {
    return p;
  }

  N посети(ПараметрЭтотШаблона p) // D2.0
  {
    return p;
  }

  N посети(ПараметрШаблонЗначения p)
  {
    return p;
  }

  N посети(ПараметрКортежШаблона p)
  {
    return p;
  }

  N посети(ПараметрыШаблона p)
  {
    return p;
  }

  N посети(АргументыШаблона p)
  {
    return p;
  }
} // override
}
