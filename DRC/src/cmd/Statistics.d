/// Author: Aziz Köksal
/// License: GPL3
/// $(Maturity average)
module cmd.Statistics;

import cmd.ASTStats;
import drc.lexer.Lexer,
       drc.lexer.Token;
import drc.parser.Parser;
import drc.ast.NodesEnum;
import drc.SourceText;
import common;

/// The statistics comman.
struct КомандаСтат
{
  ткст[] путиКФайлам; /// Модуль file пути.
  бул выводитьТаблицуТокенов; /// Whether в print the семы таблица.
  бул выводитьТаблицуУзлов; /// Whether в print the nodes таблица.

  /// Execute the команда.
  проц  пуск()
  {
    Статистика[] stats;
    foreach (путьКФайлу; путиКФайлам)
      stats ~= дайСтатистику(путьКФайлу, выводитьТаблицуТокенов, выводитьТаблицуУзлов);

    auto всего = Статистика(выводитьТаблицуТокенов, выводитьТаблицуУзлов);

    foreach (i, ref stat; stats)
    {
      всего += stat;
      выдай.formatln(
        "----\n"
        "Файл: {}\n"
        "Количество пробельных символов: {}\n"
        "Количество пробельных сем: {}\n"
        "Количество ключевых слов: {}\n"
        "Количество идентификаторов: {}\n"
        "Количество чисел: {}\n"
        "Количество комментариев: {}\n"
        "Количество всех сем: {}\n"
        "Строк кода: {}",
        путиКФайлам[i],
        stat.квоПробелов,
        stat.квоПробелнТокенов,
        stat.квоКСлов,
        stat.квоИдент,
        stat.квоЧисел,
        stat.квоКомментариев,
        stat.квоТокенов,
        stat.строкиКода
      );
    }

    if (путиКФайлам.length > 1)
    {
      выдай.formatln(
        "--------------------------------------------------------------------------------\n"
        "Всего в {} файлов:\n"
        "Количество пробельных символов: {}\n"
        "Количество пробельных сем: {}\n"
        "Количество ключевых слов: {}\n"
        "Количество идентификаторов: {}\n"
        "Количество чисел: {}\n"
        "Количество коментариев: {}\n"
        "Количество всех сем: {}\n"
        "Строк кода: {}",
        путиКФайлам.length,
        всего.квоПробелов,
        всего.квоПробелнТокенов,
        всего.квоКСлов,
        всего.квоИдент,
        всего.квоЧисел,
        всего.квоКомментариев,
        всего.квоТокенов,
        всего.строкиКода
      );
    }

    if (выводитьТаблицуТокенов)
    {
      выдай("Таблица токенов:").nl;
      выдай.formatln(" {,10} | {}", "Количество", "Вид токена");
      выдай("-----------------------------").nl;
      foreach (i, счёт; всего.таблицаТокенов)
        выдай.formatln(" {,10} | {}", счёт, Сема.вТкст(cast(TOK)i));
      выдай("// Конец таблицы токенов.").nl;
    }

    if(выводитьТаблицуУзлов)
    {
      выдай("Таблица узлов:").nl;
      выдай.formatln(" {,10} | {}", "Количество", "Вид узла");
      выдай("-----------------------------").nl;
      foreach (i, счёт; всего.таблицаУзлов)
        выдай.formatln(" {,10} | {}", счёт, г_именаКлассов[i]);
      выдай("// Конец таблицы узлов.").nl;
    }
  }
}

/// A group of statistics переменные.
struct Статистика
{
  бцел квоПробелов; /// Counter for whitespace characters.
  бцел квоПробелнТокенов;    /// Counter for all whitespace семы.
  бцел квоКСлов;    /// Counter for keywords.
  бцел квоИдент;      /// Counter for identifiers.
  бцел квоЧисел;     /// Counter for число literals.
  бцел квоКомментариев;    /// Counter for comments.
  бцел квоТокенов;      /// Counter for all семы produced by the Лексер.
  бцел строкиКода;     /// Число of lines.
  бцел[] таблицаТокенов;   /// Table of counters for all сема kinds.
  бцел[] таблицаУзлов;    /// Table of counters for all узел kinds.

  static Статистика opCall(бул разместитьТаблицуСем, бул разместитьТаблицуУзлов = нет)
  {
    Статистика s;
    if (разместитьТаблицуСем)
      s.таблицаТокенов = new бцел[TOK.МАКС];
    if (разместитьТаблицуУзлов)
      s.таблицаУзлов = new бцел[г_именаКлассов.length];
    return s;
  }

  проц  opAddAssign(Статистика s)
  {
    this.квоПробелов += s.квоПробелов;
    this.квоПробелнТокенов    += s.квоПробелнТокенов;
    this.квоКСлов    += s.квоКСлов;
    this.квоИдент      += s.квоИдент;
    this.квоЧисел     += s.квоЧисел;
    this.квоКомментариев    += s.квоКомментариев;
    this.квоТокенов      += s.квоТокенов;
    this.строкиКода     += s.строкиКода;
    foreach (i, счёт; s.таблицаТокенов)
      this.таблицаТокенов[i] += счёт;
    foreach (i, счёт; s.таблицаУзлов)
      this.таблицаУзлов[i] += счёт;
  }
}

/// Executes the statistics команда.
проц  выполни(ткст[] путиКФайлам, бул выводитьТаблицуТокенов, бул выводитьТаблицуУзлов)
{

}

/// Returns the statistics for a D source file.
Статистика дайСтатистику(ткст путьКФайлу, бул выводитьТаблицуТокенов, бул выводитьТаблицуУзлов)
{
  // Create a new record.
  auto stats = Статистика(выводитьТаблицуТокенов);

  auto исходныйТекст = new ИсходныйТекст(путьКФайлу, да);
  Парсер парсер;
  Лексер lx;
  if (выводитьТаблицуУзлов)
  {
    парсер = new Парсер(исходныйТекст);
    auto корневойУзел = парсер.старт();
    // Count nodes.
    stats.таблицаУзлов = (new СтатАДС).счёт(корневойУзел);
    lx = парсер.лексер;
  }
  else
  {
    lx = new Лексер(исходныйТекст);
    lx.сканируйВсе();
  }

  auto сема = lx.перваяСема();

  // Count семы.
  // Лексер creates ГОЛОВА + Новстр, which are not in the source текст.
  // No сема левый behind!
  stats.квоТокенов = 2;
  stats.строкиКода = lx.номСтр;
  if (выводитьТаблицуТокенов)
  {
    stats.таблицаТокенов[TOK.ГОЛОВА] = 1;
    stats.таблицаТокенов[TOK.Новстр] = 1;
  }

  // Traverse linked список.
  for (; сема.следщ; сема = сема.следщ)
  {
    stats.квоТокенов += 1;

    if (выводитьТаблицуТокенов)
      stats.таблицаТокенов[сема.вид] += 1;

    // Count whitespace characters
    if (сема.пп !is null)
      stats.квоПробелов += сема.старт - сема.пп;

    switch (сема.вид)
    {
    case TOK.Идентификатор:
      stats.квоИдент++;
      break;
    case TOK.Комментарий:
      stats.квоКомментариев++;
      break;
    case TOK.Цел32, TOK.Цел64, TOK.Бцел32, TOK.Бцел64,
         TOK.Плав32, TOK.Плав64, TOK.Плав80,
         TOK.Мнимое32, TOK.Мнимое64, TOK.Мнимое80:
      stats.квоЧисел++;
      break;
    case TOK.Новстр:
      break;
    default:
      if (сема.кслово_ли)
        stats.квоКСлов++;
      else if (сема.пробел_ли)
        stats.квоПробелнТокенов++;
    }
  }
  assert(сема.вид == TOK.КФ);
  return stats;
}
