_TEXT	segment dword use32 public 'CODE'	;size is 324
_TEXT	ends
_DATA	segment dword use32 public 'DATA'	;size is 48
_DATA	ends
CONST	segment dword use32 public 'CONST'	;size is 0
CONST	ends
_BSS	segment dword use32 public 'BSS'	;size is 0
_BSS	ends
FLAT	group	
includelib SNN.lib
	extrn	?writenl@OutBuffer@@QAEXXZ
	extrn	?writeByte@OutBuffer@@QAEXI@Z
	extrn	?writestring@OutBuffer@@QAEXPBD@Z
	extrn	?toChars@ModuleDeclaration@@QAEPADXZ
	extrn	??1OutBuffer@@UAE@XZ
	extrn	?writev@File@@QAEXXZ
	extrn	?free@Mem@@QAEXPAX@Z
	extrn	?mem@@3UMem@@A
	extrn	?ensurePathExists@FileName@@SAXPBD@Z
	extrn	?path@FileName@@SAPADPBD@Z
	extrn	_memset
	extrn	?printf@OutBuffer@@QAAXPBDZZ
	extrn	??0OutBuffer@@QAE@XZ

	public	?genhdrfile@Module@@QAEXXZ
	public	?toCBuffer@Module@@UAEXPAUOutBuffer@@PAUHdrGenState@@@Z
	public	?toHBuffer@Dsymbol@@UAEXPAUOutBuffer@@PAUHdrGenState@@@Z
_TEXT	segment
	assume	CS:_TEXT
?genhdrfile@Module@@QAEXXZ:
		sub	ESP,044h
		push	EBX
		mov	EBX,ECX
		push	ESI
		lea	ECX,8[ESP]
		call	near ptr ??0OutBuffer@@QAE@XZ
		mov	ECX,040h[EBX]
		mov	EDX,[ECX]
		call	dword ptr 014h[EDX]
		push	EAX
		push	offset FLAT:_DATA
		lea	ECX,010h[ESP]
		push	ECX
		call	near ptr ?printf@OutBuffer@@QAAXPBDZZ
		lea	ECX,014h[ESP]
		call	near ptr ?writenl@OutBuffer@@QAEXXZ
		push	034h
		push	0
		lea	EDX,02Ch[ESP]
		push	EDX
		call	near ptr _memset
		push	034h
		push	0
		lea	ECX,038h[ESP]
		push	ECX
		call	near ptr _memset
		lea	EDX,03Ch[ESP]
		mov	dword ptr 03Ch[ESP],1
		push	EDX
		lea	ECX,030h[ESP]
		mov	EDX,[EBX]
		push	ECX
		mov	ECX,EBX
		call	dword ptr 05Ch[EDX]
		mov	EAX,048h[EBX]
		mov	ECX,034h[ESP]
		mov	EDX,030h[ESP]
		mov	8[EAX],EDX
		mov	0Ch[EAX],ECX
		mov	dword ptr 030h[ESP],0
		add	ESP,024h
		mov	ECX,048h[EBX]
		mov	EDX,[ECX]
		call	dword ptr 014h[EDX]
		push	EAX
		call	near ptr ?path@FileName@@SAPADPBD@Z
		add	ESP,4
		mov	ESI,EAX
		cmp	byte ptr [EAX],0
		je	LA3
		push	ESI
		call	near ptr ?ensurePathExists@FileName@@SAXPBD@Z
		add	ESP,4
LA3:		push	ESI
		mov	ECX,offset FLAT:?mem@@3UMem@@A
		call	near ptr ?free@Mem@@QAEXPAX@Z
		mov	ECX,048h[EBX]
		call	near ptr ?writev@File@@QAEXXZ
		lea	ECX,8[ESP]
		call	near ptr ??1OutBuffer@@UAE@XZ
		pop	ESI
		pop	EBX
		add	ESP,044h
		ret
?toCBuffer@Module@@UAEXPAUOutBuffer@@PAUHdrGenState@@@Z:
		push	ECX
		push	EBX
		push	EBP
		mov	EBP,010h[ESP]
		push	ESI
		mov	ESI,ECX
		push	EDI
		cmp	dword ptr 03Ch[ESI],0
		je	L102
		push	offset FLAT:_DATA[028h]
		mov	ECX,EBP
		call	near ptr ?writestring@OutBuffer@@QAEXPBD@Z
		mov	ECX,03Ch[ESI]
		call	near ptr ?toChars@ModuleDeclaration@@QAEPADXZ
		mov	ECX,EBP
		push	EAX
		call	near ptr ?writestring@OutBuffer@@QAEXPBD@Z
		mov	ECX,EBP
		push	03Bh
		call	near ptr ?writeByte@OutBuffer@@QAEXI@Z
		mov	ECX,EBP
		call	near ptr ?writenl@OutBuffer@@QAEXXZ
L102:		mov	EDX,028h[ESI]
		xor	EBX,EBX
		cmp	4[EDX],EBX
		je	L12A
L10C:		push	dword ptr 01Ch[ESP]
		mov	ECX,028h[ESI]
		mov	EDX,8[ECX]
		push	EBP
		mov	EDI,[EBX*4][EDX]
		mov	EDX,[EDI]
		mov	ECX,EDI
		call	dword ptr 058h[EDX]
		mov	ECX,028h[ESI]
		inc	EBX
		cmp	4[ECX],EBX
		ja	L10C
L12A:		pop	EDI
		pop	ESI
		pop	EBP
		pop	EBX
		pop	EAX
		ret	8
?toHBuffer@Dsymbol@@UAEXPAUOutBuffer@@PAUHdrGenState@@@Z:
		push	ECX
		mov	EAX,[ECX]
		push	dword ptr 0Ch[ESP]
		push	dword ptr 0Ch[ESP]
		call	dword ptr 05Ch[EAX]
		pop	EAX
		ret	8
_TEXT	ends
_DATA	segment
D0	db	02fh,02fh,020h,044h,020h,069h,06dh,070h
	db	06fh,072h,074h,020h,066h,069h,06ch,065h
	db	020h,067h,065h,06eh,065h,072h,061h,074h
	db	065h,064h,020h,066h,072h,06fh,06dh,020h
	db	027h,025h,073h,027h,000h,000h,000h,000h
D28	db	06dh,06fh,064h,075h,06ch,065h,020h,000h
_DATA	ends
CONST	segment
CONST	ends
_BSS	segment
_BSS	ends
	end
