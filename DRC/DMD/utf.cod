_TEXT	segment dword use32 public 'CODE'	;size is 825
_TEXT	ends
_DATA	segment dword use32 public 'DATA'	;size is 236
_DATA	ends
CONST	segment dword use32 public 'CONST'	;size is 0
CONST	ends
_BSS	segment dword use32 public 'BSS'	;size is 0
_BSS	ends
FLAT	group	

	public	?utf_isValidDchar@@YAHI@Z
	public	?utf_decodeChar@@YAPBDPAEIPAI1@Z
	public	?utf_validateString@@YAPBDPAEI@Z
includelib SNN.lib
	extrn	__assert

	public	?utf_decodeWchar@@YAPBDPAGIPAI1@Z
_TEXT	segment
	assume	CS:_TEXT
?utf_isValidDchar@@YAHI@Z:
		mov	ECX,4[ESP]
		cmp	ECX,0D800h
		jb	L30
		cmp	ECX,0DFFFh
		jbe	L2C
		cmp	ECX,010FFFFh
		ja	L2C
		cmp	ECX,0FFFEh
		je	L2C
		cmp	ECX,0FFFFh
		jne	L30
L2C:		xor	EAX,EAX
		jmp short	L35
L30:		mov	EAX,1
L35:		ret
?utf_decodeChar@@YAPBDPAEIPAI1@Z:
		sub	ESP,0Ch
		mov	ECX,018h[ESP]
		push	EBX
		push	EBP
		mov	EBP,018h[ESP]
		push	ESI
		mov	ESI,[ECX]
		mov	BL,[EBP][ESI]
		push	EDI
		cmp	ESI,024h[ESP]
		jb	L61
		push	027h
		push	offset FLAT:_DATA
		push	offset FLAT:_DATA[8]
		call	near ptr __assert
L61:		test	BL,080h
		je	L167
		mov	014h[ESP],BL
		mov	EDX,1
		movzx	ECX,byte ptr 014h[ESP]
		mov	EBX,ECX
L7A:		mov	AL,BL
		mov	CL,DL
		shl	AL,CL
		test	AL,080h
		jne	L93
		mov	BL,014h[ESP]
		cmp	EDX,1
		je	L19F
		jmp short	L9F
L93:		inc	EDX
		cmp	EDX,4
		ja	L19F
		jmp short	L7A
L9F:		mov	ECX,7
		mov	EDI,1
		sub	ECX,EDX
		shl	EDI,CL
		dec	EDI
		movzx	ECX,BL
		and	EDI,ECX
		lea	ECX,-1[ESI][EDX]
		cmp	ECX,024h[ESP]
		jae	L19F
		mov	AL,1[ESI][EBP]
		mov	CL,BL
		and	CL,0FEh
		cmp	CL,0C0h
		je	L19F
		cmp	BL,0E0h
		jne	LE6
		mov	CL,AL
		and	CL,0E0h
		cmp	CL,080h
		je	L19F
LE6:		cmp	BL,0F0h
		jne	LF9
		mov	CL,AL
		and	CL,0F0h
		cmp	CL,080h
		je	L19F
LF9:		cmp	BL,0F8h
		jne	L10C
		mov	CL,AL
		and	CL,0F8h
		cmp	CL,080h
		je	L19F
L10C:		cmp	BL,0FCh
		jne	L11F
		mov	CL,AL
		and	CL,0FCh
		cmp	CL,080h
		je	L19F
L11F:		mov	EBX,1
		cmp	EDX,EBX
		je	L14E
L128:		lea	ECX,[ESI][EBX]
		mov	CL,[EBP][ECX]
		mov	014h[ESP],CL
		and	CL,0C0h
		cmp	CL,080h
		jne	L19F
		mov	CL,014h[ESP]
		shl	EDI,6
		inc	EBX
		and	ECX,03Fh
		or	EDI,ECX
		cmp	EBX,EDX
		jne	L128
L14E:		mov	018h[ESP],EDX
		push	EDI
		call	near ptr ?utf_isValidDchar@@YAHI@Z
		add	ESP,4
		test	EAX,EAX
		je	L19F
		mov	EDX,018h[ESP]
		add	ESI,EDX
		jmp short	L16B
L167:		movzx	EDI,BL
		inc	ESI
L16B:		push	EDI
		call	near ptr ?utf_isValidDchar@@YAHI@Z
		add	ESP,4
		test	EAX,EAX
		jne	L189
		push	068h
		push	offset FLAT:_DATA
		push	offset FLAT:_DATA[01Ch]
		call	near ptr __assert
L189:		mov	EDX,028h[ESP]
		mov	ECX,02Ch[ESP]
		mov	[EDX],ESI
		xor	EAX,EAX
		mov	[ECX],EDI
		pop	EDI
		pop	ESI
		pop	EBP
		pop	EBX
		add	ESP,0Ch
		ret
L19F:		movzx	EBX,byte ptr 0[ESI][EBP]
		mov	EDI,02Ch[ESP]
		mov	ECX,028h[ESP]
		mov	[EDI],EBX
		lea	EDX,1[ESI]
		mov	EAX,offset FLAT:_DATA[030h]
		mov	[ECX],EDX
		pop	EDI
		pop	ESI
		pop	EBP
		pop	EBX
		add	ESP,0Ch
		ret
?utf_validateString@@YAPBDPAEI@Z:
		push	EAX
		push	EAX
		push	EBX
		mov	EBX,014h[ESP]
		push	ESI
		xor	ESI,ESI
		push	EDI
		mov	EDI,018h[ESP]
		mov	0Ch[ESP],ESI
L1D3:		cmp	0Ch[ESP],EBX
		jae	L1F3
		lea	ECX,010h[ESP]
		push	ECX
		lea	EDX,010h[ESP]
		push	EDX
		push	EBX
		push	EDI
		call	near ptr ?utf_decodeChar@@YAPBDPAEIPAI1@Z
		add	ESP,010h
		mov	ESI,EAX
		test	EAX,EAX
		je	L1D3
L1F3:		pop	EDI
		mov	EAX,ESI
		pop	ESI
		pop	EBX
		add	ESP,8
		ret
		nop
		nop
		nop
		nop
?utf_decodeWchar@@YAPBDPAGIPAI1@Z:
		push	EAX
		mov	ECX,8[ESP]
		push	EAX
		mov	EAX,014h[ESP]
		mov	EDX,[EAX]
		push	EBX
		mov	BX,[EDX*2][ECX]
		push	ESI
		push	EDI
		and	EBX,0FFFFh
		cmp	EDX,01Ch[ESP]
		jb	L233
		push	098h
		push	offset FLAT:_DATA
		push	offset FLAT:_DATA[8]
		call	near ptr __assert
L233:		test	EBX,0FFFFFF80h
		je	L2CE
		cmp	EBX,0D800h
		jb	L2A0
		cmp	EBX,0DBFFh
		ja	L2A0
		lea	ESI,1[EDX]
		cmp	ESI,01Ch[ESP]
		jne	L262
		mov	EAX,offset FLAT:_DATA[048h]
		jmp	near ptr L30D
L262:		mov	EDI,018h[ESP]
		mov	CX,2[EDX*2][EDI]
		and	ECX,0FFFFh
		cmp	ECX,0DC00h
		jb	L281
		cmp	ECX,0DFFFh
		jbe	L28B
L281:		mov	EAX,offset FLAT:_DATA[078h]
		jmp	near ptr L30D
L28B:		lea	EBX,-0D7C0h[EBX]
		shl	EBX,0Ah
		lea	EBX,-0DC00h[EBX][ECX]
		add	EDX,2
		jmp short	L2CF
L2A0:		cmp	EBX,0DC00h
		jb	L2B7
		cmp	EBX,0DFFFh
		ja	L2B7
		mov	EAX,offset FLAT:_DATA[0A0h]
		jmp short	L30D
L2B7:		cmp	EBX,0FFFEh
		je	L2C7
		cmp	EBX,0FFFFh
		jne	L2CE
L2C7:		mov	EAX,offset FLAT:_DATA[0C0h]
		jmp short	L30D
L2CE:		inc	EDX
L2CF:		mov	010h[ESP],EDX
		push	EBX
		call	near ptr ?utf_isValidDchar@@YAHI@Z
		add	ESP,4
		test	EAX,EAX
		jne	L2F4
		push	0B9h
		push	offset FLAT:_DATA
		push	offset FLAT:_DATA[0D8h]
		call	near ptr __assert
L2F4:		mov	EAX,020h[ESP]
		mov	EDX,010h[ESP]
		mov	[EAX],EDX
		mov	ECX,024h[ESP]
		xor	EAX,EAX
		mov	[ECX],EBX
		pop	EDI
		pop	ESI
		pop	EBX
		add	ESP,8
		ret
L30D:		mov	EBX,018h[ESP]
		mov	SI,[EDX*2][EBX]
		mov	EDI,024h[ESP]
		mov	0Ch[ESP],EAX
		mov	EAX,020h[ESP]
		lea	ECX,1[EDX]
		and	ESI,0FFFFh
		mov	[EDI],ESI
		mov	[EAX],ECX
		mov	EAX,0Ch[ESP]
		pop	EDI
		pop	ESI
		pop	EBX
		add	ESP,8
		ret
_TEXT	ends
_DATA	segment
D0	db	075h,074h,066h,02eh,063h,000h,000h,000h
D8	db	069h,020h,03eh,03dh,020h,030h,020h,026h
	db	026h,020h,069h,020h,03ch,020h,06ch,065h
	db	06eh,000h,000h,000h
D1C	db	075h,074h,066h,05fh
	db	069h,073h,056h,061h,06ch,069h,064h,044h
	db	063h,068h,061h,072h,028h,056h,029h,000h
D30	db	069h,06eh,076h,061h,06ch,069h,064h,020h
	db	055h,054h,046h,02dh,038h,020h,073h,065h
	db	071h,075h,065h,06eh,063h,065h,000h,000h
D48	db	073h,075h,072h,072h,06fh,067h,061h,074h
	db	065h,020h,055h,054h,046h,02dh,031h,036h
	db	020h,068h,069h,067h,068h,020h,076h,061h
	db	06ch,075h,065h,020h,070h,061h,073h,074h
	db	020h,065h,06eh,064h,020h,06fh,066h,020h
	db	073h,074h,072h,069h,06eh,067h,000h,000h
D78	db	073h,075h,072h,072h,06fh,067h,061h,074h
	db	065h,020h,055h,054h,046h,02dh,031h,036h
	db	020h,06ch,06fh,077h,020h,076h,061h,06ch
	db	075h,065h,020h,06fh,075h,074h,020h,06fh
	db	066h,020h,072h,061h,06eh,067h,065h,000h
DA0	db	075h,06eh,070h,061h,069h,072h,065h,064h
	db	020h,073h,075h,072h,072h,06fh,067h,061h
	db	074h,065h,020h,055h,054h,046h,02dh,031h
	db	036h,020h,076h,061h,06ch,075h,065h,000h
DC0	db	069h,06ch,06ch,065h,067h,061h,06ch,020h
	db	055h,054h,046h,02dh,031h,036h,020h,076h
	db	061h,06ch,075h,065h,000h,000h,000h,000h
DD8	db	075h,074h,066h,05fh,069h,073h,056h,061h
	db	06ch,069h,064h,044h,063h,068h,061h,072h
	db	028h,075h,029h,000h
_DATA	ends
CONST	segment
CONST	ends
_BSS	segment
_BSS	ends
	end
